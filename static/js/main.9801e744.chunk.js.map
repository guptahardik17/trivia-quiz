{"version":3,"sources":["logo.svg","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Question","react_default","a","createElement","className","this","props","content","Component","QuestionCount","counter","total","AnswerOption","type","name","value","onChange","onAnswerSelected","htmlFor","Quiz","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderAnswerOptions","bind","assertThisInitialized","key","components_AnswerOption","react_addons_css_transition_group_default","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","components_QuestionCount","questionId","questionTotal","components_Question","question","answerOptions","map","Result","e","preventDefault","window","location","reload","quizResult","onClick","gameRestart","App","state","quizQuestions","totalquestions","answer","answersCount","result","handleAnswerSelected","_this2","fetch","then","response","json","data","answers","results","incorrect_answers","push","correct_answer","setState","length","isLoading","catch","error","fetchUsers","event","_this3","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","console","log","toString","components_Quiz","components_Result","src","logo","alt","renderResult","renderQuiz","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9801e744.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React, { Component } from 'react';\n\n\nclass Question extends Component {\n  render(){\n  \treturn (\n  \t\t<h2 className=\"question\">{this.props.content}</h2>\n  \t\t);\n  }\n}\n\nexport default Question;\n","\nimport React, { Component } from 'react';\n\nclass QuestionCount extends Component {\n  render(){\n  \treturn (\n  \t\t<div>\n  \t\t\tQuestion <span>{this.props.counter}</span> of <span>{this.props.total}</span>\n  \t\t</div>\n\n  \t);\n  }\n}\n\n\nexport default QuestionCount;\n","\nimport React, { Component } from 'react';\n\nclass AnswerOption extends Component {\n\n\n  render(){\n  \treturn (\n      <li className=\"answerOption\">\n        <input\n  \t\t\t\ttype=\"radio\"\n  \t\t\t\tname=\"radioGroup\"\n  \t\t\t\tvalue={this.props.value}\n  \t\t\t\tonChange={this.props.onAnswerSelected}\n  \t\t\t/>\n  \t\t\t<label className=\"radioCustomLabel\" htmlFor={this.props.value}>\n  \t\t\t\t{this.props.value}\n  \t\t\t</label>\n  \t\t</li>\n  \t);\n  }\n}\n\n\n\nexport default AnswerOption;\n","\nimport React, { Component } from 'react';\n\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\n\nclass Quiz extends Component {\n\n  constructor(props) {\n    super(props);\n    this.renderAnswerOptions = this.renderAnswerOptions.bind(this);\n  }\n\n  renderAnswerOptions(key) {\n\t\treturn (\n      <AnswerOption\n        key={key}\n        value={key}\n        onAnswerSelected={this.props.onAnswerSelected}\n      />\n\t\t);\n\t}\n\nrender(){\n  \treturn(\n  \t\t\t<ReactCSSTransitionGroup\n  \t\t\tclassName=\"container\"\n  \t\t\tcomponent=\"div\"\n  \t\t\ttransitionName=\"fade\"\n  \t\t\ttransitionEnterTimeout={800}\n  \t\t\ttransitionLeaveTimeout={500}\n  \t\t\ttransitionAppear\n  \t\t\ttransitionAppearTimeout={500}\n  \t\t>\n\n    \t\t<div className=\"quiz\">\n    \t\t\t<QuestionCount\n    \t\t\t\tcounter={this.props.questionId}\n    \t\t\t\ttotal={this.props.questionTotal}\n    \t\t\t/>\n\n    \t\t\t<Question content={this.props.question} />\n    \t\t\t<ul className=\"answerOptions\">\n  \t\t\t\t\t{this.props.answerOptions.map(this.renderAnswerOptions)}\n    \t\t\t</ul>\n    \t\t</div>\n\n\t\t\t</ReactCSSTransitionGroup>\n  \t);\n  }\n}\n\n\n\nexport default Quiz;\n","import React, { Component } from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nclass Result extends Component {\n  gameRestart(e){\n    e.preventDefault();\n    window.location.reload();\n  }\n  render(){\n  \treturn (\n  \t\t<ReactCSSTransitionGroup\n  \t\t\tclassName=\"container result\"\n  \t\t\tcomponent =\"div\"\n  \t\t\ttransitionName=\"fade\"\n  \t\t\ttransitionEnterTimeout={800}\n  \t\t\ttransitionLeaveTimeout={500}\n  \t\t\ttransitionAppear\n  \t\t\ttransitionAppearTimeout={500}\n  \t\t>\n  \t\t\t<div>\n  \t\t\t\tYou scored <strong>{this.props.quizResult}</strong>!\n          <br /><br />\n          <button value=\"REPLAY\" onClick={this.gameRestart}>REPLAY</button>\n  \t\t\t</div>\n  \t\t</ReactCSSTransitionGroup>\n  \t);\n  }\n}\n\n\nexport default Result;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizQuestions: [],\n      counter: 0,\n      totalquestions: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: 0,\n      result: ''\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  fetchUsers() {\n    fetch(`https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple`)\n      .then(response => response.json())\n      .then(data =>{\n        data = data.results;\n        var answers = data[0].incorrect_answers;\n        answers.push(data[0].correct_answer);\n\n        this.setState({\n          quizQuestions: data,\n          totalquestions: data.length,\n          question: data[0].question,\n          answerOptions: answers,\n          answer: data[0].correct_answer,\n          isLoading: false,\n        });\n      })\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  componentWillMount() {\n    this.fetchUsers();\n  }\n\n  handleAnswerSelected(event) {\n    event.preventDefault();\n\n    this.setUserAnswer(event.currentTarget.value);\n    if (this.state.questionId < this.state.totalquestions) {\n        setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n        setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    console.log(answer);\n    if(answer === this.state.answer){\n      this.setState({\n          answersCount: this.state.answersCount+1\n      });\n    }\n    else{\n      this.setState({\n          answersCount: this.state.answersCount\n      });\n    }\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    var answers = this.state.quizQuestions[counter].incorrect_answers;\n    answers.push(this.state.quizQuestions[counter].correct_answer);\n\n    this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: this.state.quizQuestions[counter].question,\n        answerOptions: answers,\n        answer: this.state.quizQuestions[counter].correct_answer\n    });\n  }\n\n  getResults() {\n    return this.state.answersCount;\n  }\n\n  setResults(result) {\n      this.setState({ result: result.toString() });\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={this.state.totalquestions}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n    return (\n      <Result quizResult={this.state.result} />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        {this.state.result ? this.renderResult() :this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}